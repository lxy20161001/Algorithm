//
// Created by john on 2018-6-8.
//

#ifndef ALGORITHMNEW_SELECTIONSORT_H
#define ALGORITHMNEW_SELECTIONSORT_H

#include <iostream>
#include <string>
#include <ctime>
#include <cassert>

using namespace std;

template <typename T>
class Sort{
public:
    int n;
    T *arr;

    Sort(){
        n = 1000;
        arr = this->generateRandomArray(n,0,n);
    }

    Sort(int n){
        this->n = n;
        arr = this->generateRandomArray(n,0,n);
    }

    ~Sort(){
        delete arr;
    }
public:
    void selectionSort(T arr[],int n){
        for(int i = 0;i<n;i++){
            int min = i;
            for( int j = min;j<n;j++){
                if(arr[j]<arr[min]){
                    min = j;
                }
            }

            swapNum(arr[i],arr[min]);
        }
    }

    void InsertionSort(T arr[],int n){
        for(int i = 1;i< n;i++){
            T temp = arr[i];
            int p;
            for(p=i-1;p>=0 && temp<arr[p];--p){
                arr[p+1] = arr[p];
            }
            arr[p+1] = temp;
        }
    }

    void shellSort(T arr[],int size){

        int h = 1,i,j;
        int temp;
        while(h<size/3){
            h = 3*h+1;
        }

        for(;h>0;h/=3){
            for(i=h;i<size;i++){
                temp = arr[i];
                for(j = i-h;j>=0 && arr[j]>temp;j=j-h){
                    arr[j+h] = arr[j];
                }
                arr[j+h] = temp;
            }
        }
    }

private:
    void swapNum(T &a,T &b){
        T t = a;
        a = b;
        b = t;
    }

public:

    int* generateRandomArray(int n,int rangeL,int rangeR){
        assert(rangeL<=rangeR);

        int *arr = new int[n];

        srand(time(NULL));

        for(int i = 0; i< n;++i){
            arr[i] = rand()%(rangeR - rangeL+1) + rangeL;
        }

        return  arr;
    }

    void PrintArray(T arr[],int n){
        for(int i =0;i<n;i++){
            cout<<arr[i]<<",";
        }
        cout<<endl;
    }

    void testSort(string sortName,void(Sort::*sort)(T[],int),T arr[],int n){
        clock_t startTime = clock();
        (this->*sort)(arr,n);
        clock_t endTime = clock();
        assert(isSorted(arr,n));
        cout<<"ins"<<":"<<double(endTime-startTime)/CLOCKS_PER_SEC<<" s"<<endl;
    }

    bool isSorted(T arr[],int n){
        for(int i = 0;i<n-1;i++){
            if(arr[i]>arr[i+1]){
                return false;
            }
        }
        return true;
    }

};

struct Student{
    string name;
    int score;

    bool operator<(const Student &otherStudent){
        return score < otherStudent.score;
    }

    friend ostream&operator<<(ostream &os,const Student &student){
        os<<"Student: "<<student.name <<" "<<student.score<<" ";

        return os;
    }
};

#endif //ALGORITHMNEW_SELECTIONSORT_H
